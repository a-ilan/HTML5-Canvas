{"version":3,"sources":["canvas.js","tree.js","maze.js","cave.js","dungeon.js","galaxy.js","noise.js","index.js"],"names":["CanvasView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","name","renderer","Math","random","handleClick","bind","assertThisInitialized","render","react_default","a","createElement","id","width","height","style","border","margin","onClick","React","Component","Tree","canvas","document","getElementById","ctx","getContext","h","w","resetTransform","fillStyle","strokeStyle","fillRect","translate","branch","len","rot1","PI","rot2","beginPath","moveTo","lineTo","stroke","rotate","min","max","Maze","WALL","PATH","UP","RIGHT","DOWN","LEFT","cell","floor","board","Array","i","setWalls","setPaths","drawGrid","j","min_inclusive","max_exclusive","rand","dirs","randomDirections","x","random_odd","y","nodes","push","length","node","pop","next","visitNextNode","dir","tmp","Cave","seed","Date","now","chanceToStartAlive","numberOfSteps","padding","CELL","makeArray2d","generateCave","initCells","nextStep","nbrs","countAliveNeighbors","count","isMiddle","isAlive","arr","Dungeon","maxRoomSize","minRoomSize","maxRooms","Utils","rooms","addRooms","vertices","getVertices","mst","getMinSpanningTree","addCorridors","random_int","Room","k","room","randomRoom","isRoomAvailable","x2","y2","isWall","verts","v","u","addCorridor","p1","p2","min_x","max_x","min_y","max_y","addWallToCorridor","center","tree","dist","inQueue","Infinity","queue","Heap","empty","weight","Point","distance","decreaseKey","dist_sqr","pow","sqrt","keys","items","item","key","size","bubbleUp","parent","swap","minHeapify","left","right","newKey","index","findItem","heap","concat","Noise","simplex","SimplexNoise","Alea","imageData","getImageData","value","turbulence","setHeight","putImageData","data","octaves","persistence","scale","low","high","maxAmp","amp","freq","total","noise2D","Galaxy","drawGalaxy","pivot","point","rotation","r","drawPixel","angle","radians","cos","sin","MyApp","ReactDOM","src_MyApp"],"mappings":"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","file":"static/js/main.fa5d72b9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass CanvasView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.name = props.renderer.name + Math.random();\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.renderer = new this.props.renderer(this.name);\r\n    }\r\n\r\n    handleClick() {\r\n        this.renderer.render();\r\n    }\r\n\r\n    componentWillMount(){\r\n    }\r\n\r\n    //after render\r\n    componentDidMount() {\r\n        this.renderer.render();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n    }\r\n\r\n    render() {\r\n        let style = { 'border': '1px solid #999999', 'margin': '5px' };\r\n        return <canvas id={this.name} width=\"640\" height=\"360\" style={style} onClick={this.handleClick}>\r\n            Browser does not support the canvas element.\r\n            </canvas>;\r\n    }\r\n};\r\n\r\nexport default CanvasView;","// fractal\r\n\r\nclass Tree {\r\n    constructor(name){\r\n        this.name = name;\r\n    }\r\n    \r\n    render(){\r\n        this.canvas = document.getElementById(this.name);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.h = this.canvas.height;\r\n        this.w = this.canvas.width;\r\n        this.ctx.resetTransform();\r\n        this.ctx.fillStyle = \"#000000\";\r\n        this.ctx.strokeStyle = \"#ffffff\";\r\n        this.ctx.fillRect(0,0,this.w,this.h);\r\n        this.ctx.translate(this.w/2,this.h);\r\n        this.branch(110);\r\n    }\r\n\r\n    branch(len){\r\n        if(len < 4) return;\r\n  \r\n        let rot1 = Math.PI/this.random(3,7);\r\n        let rot2 = Math.PI/this.random(3,7);\r\n        \r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(0,0);\r\n        this.ctx.lineTo(0,-len);\r\n        this.ctx.stroke();\r\n        this.ctx.translate(0,-len);\r\n        \r\n        this.ctx.rotate(rot1);\r\n        this.branch(len/this.random(1.4,1.6));\r\n        this.ctx.rotate(-rot1);\r\n        \r\n        this.ctx.rotate(-rot2);\r\n        this.branch(len/this.random(1.4,1.6));\r\n        this.ctx.rotate(rot2);\r\n        \r\n        this.ctx.translate(0,len);\r\n    }\r\n\r\n    random(min,max){\r\n        return Math.random() * (max-min) + min;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Tree;","// Depth First Search\r\n\r\nclass Maze {\r\n    constructor(name){\r\n        this.name = name;\r\n        this.WALL = 0;\r\n        this.PATH = 1;\r\n        this.UP = 0;\r\n        this.RIGHT = 1;\r\n        this.DOWN = 2;\r\n        this.LEFT = 3;\r\n        this.cell = 6; //cell width\r\n    }\r\n\r\n    render(){\r\n        this.canvas = document.getElementById(this.name);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n\r\n        this.h = Math.floor(this.canvas.height/this.cell);\r\n        this.w = Math.floor(this.canvas.width/this.cell);\r\n        this.board = new Array(this.w);\r\n        for (var i = 0; i < this.w; i++) {\r\n            this.board[i] = new Array(this.h);\r\n        }\r\n\r\n        this.setWalls();\r\n        this.setPaths();\r\n        this.drawGrid();\r\n    }\r\n\r\n    setWalls(){\r\n        for(var i = 0; i < this.w; i++){\r\n          for(var j = 0; j < this.h; j++){\r\n            this.board[i][j] = this.WALL;\r\n          }\r\n        }\r\n    }\r\n\r\n    random(min_inclusive,max_exclusive){\r\n        var min = min_inclusive;\r\n        var max = max_exclusive-min;\r\n        return Math.floor((Math.random() * max) + min);\r\n    }\r\n\r\n    random_odd(min_inclusive,max_exclusive){\r\n        var rand = this.random(min_inclusive,max_exclusive);\r\n        if(rand%2 === 0){\r\n          if(rand === max_exclusive-1) rand--;\r\n          else rand++;\r\n        }\r\n        return rand;\r\n      }\r\n    \r\n    // Depth First Search\r\n    setPaths(){\r\n        //stating point\r\n        var dirs = this.randomDirections();\r\n        var x = this.random_odd(0,this.w);\r\n        var y = this.random_odd(0,this.h);\r\n        \r\n        var nodes = [];\r\n        nodes.push([x,y,dirs[0]]);\r\n        nodes.push([x,y,dirs[1]]);\r\n        nodes.push([x,y,dirs[2]]);\r\n        nodes.push([x,y,dirs[3]]);\r\n        this.board[x][y] = this.PATH;\r\n        \r\n        while(nodes.length !== 0){\r\n            var node = nodes.pop();\r\n            var next = this.visitNextNode(node);\r\n            if(next == null) continue;\r\n            x = next[0];\r\n            y = next[1];\r\n            dirs = this.randomDirections();\r\n            nodes.push([x,y,dirs[0]]);\r\n            nodes.push([x,y,dirs[1]]);\r\n            nodes.push([x,y,dirs[2]]);\r\n            nodes.push([x,y,dirs[3]]);\r\n        }\r\n    }\r\n    \r\n    randomDirections(){\r\n        let dir = new Array(4);\r\n        for(let i = 0; i < 4; i++) dir[i] = i;\r\n        for(let i = 0; i < 4; i++){\r\n            let rand = this.random(0,4);\r\n            let tmp = dir[i];\r\n            dir[i] = dir[rand];\r\n            dir[rand] = tmp;\r\n        }\r\n        return dir;\r\n    }\r\n    \r\n    visitNextNode(node){\r\n        var x = node[0];\r\n        var y = node[1];\r\n        var dir = node[2];\r\n        switch(dir){\r\n            case this.UP:\r\n            if(y - 2 > 0 && this.board[x][y-2] === this.WALL){\r\n                this.board[x][y-1] = this.PATH;\r\n                this.board[x][y-2] = this.PATH;\r\n                return [x,y-2];\r\n            }\r\n            break;\r\n            case this.RIGHT:\r\n            if(x + 2 < this.w-1 && this.board[x+2][y] === this.WALL){\r\n                this.board[x+1][y] = this.PATH;\r\n                this.board[x+2][y] = this.PATH;\r\n                return [x+2,y];\r\n            }\r\n            break;\r\n            case this.DOWN:\r\n            if(y + 2 < this.h-1 && this.board[x][y+2] === this.WALL){\r\n                this.board[x][y+1] = this.PATH;\r\n                this.board[x][y+2] = this.PATH;\r\n                return [x,y+2];\r\n            }\r\n            break;\r\n            case this.LEFT:\r\n            if(x - 2 > 0 && this.board[x-2][y] === this.WALL){\r\n                this.board[x-1][y] = this.PATH;\r\n                this.board[x-2][y] = this.PATH;\r\n                return [x-2,y];\r\n            }\r\n            break;\r\n            default:\r\n            return null;\r\n        }\r\n        return null;  \r\n    }\r\n    \r\n    drawGrid(){\r\n        //background\r\n        this.ctx.fillStyle = \"#000000\"; //black\r\n        this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);\r\n        \r\n        //cells color\r\n        this.ctx.fillStyle = \"#ffffff\"; //white\r\n        \r\n        //draw\r\n        for(var i = 0; i < this.w; i++){\r\n            for(var j = 0; j < this.h; j++){\r\n            if(this.board[i][j] === this.PATH){\r\n                this.ctx.fillRect(i*this.cell, j*this.cell, this.cell, this.cell);\r\n            }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Maze;","// cellular automata\r\n\r\nconst DEAD = 0;\r\nconst ALIVE = 1;\r\n\r\nclass Cave {\r\n    constructor(name){\r\n        this.name = name;\r\n        this.seed = Date.now();\r\n        this.chanceToStartAlive = 0.5;\r\n        this.numberOfSteps = 5;\r\n        this.padding = 2;\r\n        this.CELL = 4; //cell width\r\n    }\r\n\r\n    render(){\r\n        this.canvas = document.getElementById(this.name);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.h = Math.floor(this.canvas.height/this.CELL);\r\n        this.w = Math.floor(this.canvas.width/this.CELL);\r\n        this.board = this.makeArray2d(this.w,this.h);\r\n        this.generateCave();\r\n    }\r\n\r\n    generateCave(){\r\n        this.initCells();\r\n        for(let i = 0; i < this.numberOfSteps; i++){\r\n            this.nextStep();\r\n        }\r\n        this.drawGrid();\r\n    }\r\n\r\n    initCells(){\r\n        for(let i = this.padding; i < this.w-this.padding; i++){\r\n            for(var j = this.padding; j < this.h-this.padding; j++){\r\n                if(this.random(0,1) < this.chanceToStartAlive)\r\n                    this.board[i][j] = ALIVE;\r\n                else \r\n                    this.board[i][j] = DEAD;\r\n            }\r\n        }\r\n    }\r\n    \r\n    nextStep(){\r\n        let next = new Array(this.w);\r\n        for(let i = 0; i < this.w; i++){\r\n            next[i] = new Array(this.h);\r\n            for(let j = 0; j < this.h; j++){\r\n                let nbrs = this.countAliveNeighbors(i,j);\r\n                \r\n                if(this.board[i][j] === ALIVE){\r\n                    if(nbrs < 4){ //if starvation\r\n                        next[i][j] = DEAD; //cell dies\r\n                    } else {\r\n                        next[i][j] = ALIVE;\r\n                    }\r\n                } else {\r\n                    if(nbrs > 4){ //if breeding\r\n                        next[i][j] = ALIVE; //cell born\r\n                    } else {\r\n                        next[i][j] = DEAD;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.board = next;\r\n    }\r\n    \r\n    countAliveNeighbors(x, y){\r\n        let count = 0;\r\n        for (let i = -1; i <= 1; i++) {\r\n            for (let j = -1; j <= 1; j++) {\r\n                    //if cell is in the boundaries\r\n                let isInBound = x+i < this.w && y+j < this.h && x+i >= 0 && y+j >= 0;\r\n                if(!isInBound) return 0; //if cell is on edge\r\n\r\n                    //count alive cells around the middle cell\r\n                let isMiddle = i === 0 && j === 0;\r\n                let isAlive = this.board[x+i][y+j] === ALIVE;\r\n                if(!isMiddle && isAlive) count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    makeArray2d(width, height){\r\n        let arr = new Array(width);\r\n        for (let i = 0; i < width; i++) {\r\n            arr[i] = new Array(height);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    random(min, max){\r\n        max = max || 1;\r\n        min = min || 0;\r\n        this.seed = (this.seed * 9301 + 49297) % 233280;\r\n        let rnd = this.seed / 233280;\r\n        return min + rnd * (max - min);\r\n    }\r\n\r\n    drawGrid(){\r\n        //background\r\n        this.ctx.fillStyle = \"#000000\"; //black\r\n        this.ctx.fillRect(0,0,this.canvas.width,this.canvas.height);\r\n    \r\n        //cells color\r\n        this.ctx.fillStyle = \"#ffffff\"; //white\r\n    \r\n        //draw\r\n        for(var i = 0; i < this.w; i++){\r\n         for(var j = 0; j < this.h; j++){\r\n            if(this.board[i][j] === ALIVE){\r\n                this.ctx.fillRect(i*this.CELL, j*this.CELL, this.CELL, this.CELL);\r\n            }\r\n         }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Cave;","// Prim algorithm - minimum spanning tree \r\n\r\nconst VOID = 0;\r\nconst FLOOR = 1;\r\nconst WALL = 2;\r\n\r\nclass Dungeon {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.cell = 6;\r\n        this.maxRoomSize = 14;\r\n        this.minRoomSize = 6;\r\n        this.maxRooms = 100;\r\n    }\r\n\r\n    render() {\r\n        this.canvas = document.getElementById(this.name);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.h = Math.floor(this.canvas.height / this.cell);\r\n        this.w = Math.floor(this.canvas.width / this.cell);\r\n        this.board = Utils.makeArray2d(this.w, this.h);\r\n        this.initCells();\r\n        var rooms = this.addRooms();\r\n        var vertices = this.getVertices(rooms);\r\n        var mst = Utils.getMinSpanningTree(vertices);\r\n        this.addCorridors(vertices, mst);\r\n        this.drawGrid();\r\n    }\r\n\r\n    randomRoom() {\r\n        var width = Utils.random_int(this.minRoomSize, this.maxRoomSize);\r\n        var height = Utils.random_int(this.minRoomSize, this.maxRoomSize);\r\n        var x = Utils.random_int(0, this.w - width);\r\n        var y = Utils.random_int(0, this.h - height);\r\n        var room = new Room(x, y, width, height);\r\n        return room;\r\n    }\r\n\r\n    addRooms() {\r\n        var rooms = [];\r\n        for (var k = 0; k < this.maxRooms; k++) {\r\n            var room = this.randomRoom();\r\n            if (this.isRoomAvailable(room)) {\r\n                rooms.push(room);\r\n                var x = room.x; var y = room.y;\r\n                var x2 = x + room.width; var y2 = y + room.height;\r\n                for (var i = x; i < x2; i++) {\r\n                    for (var j = y; j < y2; j++) {\r\n                        var isWall = i === x || j === y\r\n                            || i === x2 - 1 || j === y2 - 1;\r\n                        if (isWall) this.board[i][j] = WALL;\r\n                        else this.board[i][j] = FLOOR;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return rooms;\r\n    }\r\n\r\n    initCells() {\r\n        for (var i = 0; i < this.w; i++) {\r\n            for (var j = 0; j < this.h; j++) {\r\n                this.board[i][j] = VOID;\r\n            }\r\n        }\r\n    }\r\n\r\n    isRoomAvailable(room) {\r\n        var x = room.x; var y = room.y;\r\n        var x2 = x + room.width; var y2 = y + room.height;\r\n        for (var i = x; i < x2; i++) {\r\n            for (var j = y; j < y2; j++) {\r\n                if (this.board[i][j] !== VOID) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    addCorridors(verts, mst) {\r\n        for (let v = 1; v < verts.length; v++) {\r\n            let u = mst[v];\r\n            this.addCorridor(verts[u], verts[v]);\r\n        }\r\n    }\r\n\r\n    addCorridor(p1, p2) {\r\n        if (p1.x < p2.x) {\r\n            let min_x = p1.x;\r\n            let max_x = p2.x;\r\n            let min_y = Math.min(p1.y, p2.y);\r\n            let max_y = Math.max(p1.y, p2.y);\r\n            for (let i = min_x; i < max_x; i++) {\r\n                this.board[i][p1.y] = FLOOR;\r\n                this.addWallToCorridor(i, p1.y);\r\n            }\r\n            this.board[max_x][p1.y] = FLOOR;\r\n            this.addWallToCorridor(max_x, p1.y);\r\n            for (let i = min_y; i < max_y; i++) {\r\n                this.board[max_x][i] = FLOOR;\r\n                this.addWallToCorridor(max_x, i);\r\n            }\r\n        } else {\r\n            let min_x = p2.x;\r\n            let max_x = p1.x;\r\n            let min_y = Math.min(p1.y, p2.y);\r\n            let max_y = Math.max(p1.y, p2.y);\r\n            for (let i = min_x; i < max_x; i++) {\r\n                this.board[i][p2.y] = FLOOR;\r\n                this.addWallToCorridor(i, p2.y);\r\n            }\r\n            this.board[max_x][p2.y] = FLOOR;\r\n            this.addWallToCorridor(max_x, p2.y);\r\n            for (let i = min_y; i < max_y; i++) {\r\n                this.board[max_x][i] = FLOOR;\r\n                this.addWallToCorridor(max_x, i);\r\n            }\r\n        }\r\n    }\r\n\r\n    addWallToCorridor(x, y) {\r\n        for (var i = -1; i <= 1; i++) {\r\n            for (var j = -1; j <= 1; j++) {\r\n                if (x + i < 0 || y + j < 0) continue;\r\n                if (x + i >= this.w || y + j >= this.h) continue;\r\n                if (this.board[x + i][y + j] === VOID)\r\n                    this.board[x + i][y + j] = WALL;\r\n            }\r\n        }\r\n    }\r\n\r\n    getVertices(rooms) {\r\n        var vertices = [];\r\n        for (var i = 0; i < rooms.length; i++) {\r\n            vertices.push(rooms[i].center());\r\n        }\r\n        return vertices;\r\n    }\r\n\r\n    drawGrid() {\r\n        for (var i = 0; i < this.w; i++) {\r\n            for (var j = 0; j < this.h; j++) {\r\n                if (this.board[i][j] === FLOOR) {\r\n                    this.ctx.fillStyle = \"#ffffff\";\r\n                } else if (this.board[i][j] === WALL) {\r\n                    this.ctx.fillStyle = \"#555555\";\r\n                } else { //background\r\n                    this.ctx.fillStyle = \"#000000\";\r\n                }\r\n                this.ctx.fillRect(i * this.cell, j * this.cell, this.cell, this.cell);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Utils {\r\n    static seed = Date.now();\r\n\r\n    static makeArray2d(width, height) {\r\n        let arr = new Array(width);\r\n        for (let i = 0; i < width; i++) {\r\n            arr[i] = new Array(height);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    static random(min, max) {\r\n        max = max || 1;\r\n        min = min || 0;\r\n        this.seed = (this.seed * 9301 + 49297) % 233280;\r\n        let rnd = this.seed / 233280;\r\n        return min + rnd * (max - min);\r\n    }\r\n\r\n    static random_int(min, max) {\r\n        return Math.floor(Utils.random(min, max + 1));\r\n    }\r\n\r\n    //prim - minimum spanning tree for complete graphs\r\n    static getMinSpanningTree(vertices) {\r\n        let tree = {};\r\n        let dist = new Array(vertices.length);\r\n        let inQueue = new Array(vertices.length);\r\n        for (let i = 1; i < vertices.length; i++) {\r\n            dist[i] = Infinity;\r\n            inQueue[i] = false;\r\n        }\r\n        let startingIndex = 0;\r\n        dist[startingIndex] = 0;\r\n        let queue = new Heap();\r\n\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            queue.push(i, dist[i]);\r\n            inQueue[i] = true;\r\n        }\r\n\r\n        while (!queue.empty()) {\r\n            let u = queue.pop();\r\n            inQueue[u] = false;\r\n\r\n            for (let v = 0; v < vertices.length; v++) {\r\n                if (v === u) continue;\r\n                let weight = Point.distance(vertices[u], vertices[v]);\r\n                if (inQueue[v] && weight < dist[v]) {\r\n                    dist[v] = weight;\r\n                    tree[v] = u;\r\n                    queue.decreaseKey(v, weight);\r\n                }\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n}\r\n\r\nclass Room {\r\n    constructor(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    center() {\r\n        var x = Math.floor(this.x + this.width / 2);\r\n        var y = Math.floor(this.y + this.height / 2);\r\n        return new Point(x, y);\r\n    }\r\n}\r\n\r\nclass Point {\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    static distance(p1, p2) {\r\n        let dist_sqr = Math.pow(p2.x - p1.x, 2)\r\n            + Math.pow(p2.y - p1.y, 2);\r\n        return Math.floor(Math.sqrt(dist_sqr));\r\n    }\r\n}\r\n\r\nclass Heap {\r\n    constructor() {\r\n        this.keys = [null];\r\n        this.items = [null];\r\n    }\r\n\r\n    //O(n)\r\n    static build(items, keys) {\r\n        let heap = new Heap();\r\n        if (keys.length === 0) return heap;\r\n        heap.keys = heap.keys.concat(keys);\r\n        heap.items = heap.items.concat(items);\r\n        let first = Math.floor(heap.size() / 2);\r\n        for (let i = first; i >= 1; i--)\r\n            heap.minHeapify(i);\r\n        return heap;\r\n    }\r\n\r\n    push(item, key) {\r\n        this.items.push(item);\r\n        this.keys.push(key);\r\n        let i = this.size();\r\n        this.bubbleUp(i);\r\n    }\r\n\r\n    bubbleUp(i) {\r\n        let key = this.keys[i];\r\n        while (i >= 1) {\r\n            let j = this.parent(i);\r\n            if (j === -1) return;\r\n\r\n            if (key < this.keys[j]) {\r\n                this.swap(i, j);\r\n                i = j;\r\n            }\r\n            else return;\r\n        }\r\n    }\r\n\r\n    peek() {\r\n        if (this.empty()) return null;\r\n        return this.items[1];\r\n    }\r\n\r\n    pop() {\r\n        if (this.empty()) return null;\r\n        if (this.size() === 1) {\r\n            this.keys.pop();\r\n            return this.items.pop();\r\n        }\r\n        var min = this.items[1];\r\n        this.items[1] = this.items.pop();\r\n        this.keys[1] = this.keys.pop();\r\n        this.minHeapify(1);\r\n        return min;\r\n    }\r\n\r\n    //O(logn)\r\n    //shift down\r\n    minHeapify(i) {\r\n        var left = this.left(i);\r\n        var right = this.right(i);\r\n        if (left === -1 && right === -1) return; //if no children\r\n        if (right === -1) { //if one child\r\n            if (this.keys[left] < this.keys[i]) {\r\n                this.swap(i, left);\r\n                this.minHeapify(left);\r\n            }\r\n        }\r\n        else if (this.keys[left] < this.keys[i] || this.keys[right] < this.keys[i]) {\r\n            if (this.keys[left] < this.keys[right]) {\r\n                this.swap(i, left);\r\n                this.minHeapify(left);\r\n            }\r\n            else {\r\n                this.swap(i, right);\r\n                this.minHeapify(right);\r\n            }\r\n        }\r\n    }\r\n\r\n    empty() {\r\n        return this.size() === 0;\r\n    }\r\n\r\n    size() {\r\n        return this.keys.length - 1;\r\n    }\r\n\r\n    parent(i) {\r\n        var parent = Math.floor(i / 2);\r\n        if (parent > this.size() || parent < 1)\r\n            return -1;\r\n        return parent;\r\n    }\r\n\r\n    left(i) {\r\n        var left = 2 * i;\r\n\r\n        if (left > this.size() || left < 1)\r\n            return -1;\r\n\r\n        return left;\r\n    }\r\n\r\n    right(i) {\r\n        var right = 2 * i + 1;\r\n\r\n        if (right > this.size() || right < 1)\r\n            return -1;\r\n\r\n        return right;\r\n    }\r\n\r\n    decreaseKey(item, newKey) {\r\n        var index = this.findItem(item);\r\n        this.keys[index] = newKey;\r\n        this.bubbleUp(index);\r\n    }\r\n\r\n    findItem(item) {\r\n        for (var i = 0; i < this.items.length; i++) {\r\n            if (this.items[i] === item) return i;\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    swap(i, j) {\r\n        var tmp = this.keys[i];\r\n        this.keys[i] = this.keys[j];\r\n        this.keys[j] = tmp;\r\n\r\n        tmp = this.items[i];\r\n        this.items[i] = this.items[j];\r\n        this.items[j] = tmp;\r\n    }\r\n}\r\n\r\nexport default Dungeon;","//spiral\r\n\r\nvar rotation = 0.5000751357963434;\r\nvar space = 0.015;\r\nvar iter = 20000;\r\nvar randomness = 2;\r\nvar w,h;\r\n\r\nclass Galaxy {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n\r\n    render() {\r\n        this.canvas = document.getElementById(this.name);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        h = this.canvas.height;\r\n        w = this.canvas.width;\r\n        this.ctx.fillStyle = \"#000000\"; //black\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.drawGalaxy();\r\n    }\r\n\r\n    drawGalaxy(){\r\n        var pivot = {x: w/2, y: h/2};\r\n        for(var i = 0; i < iter; i++){\r\n            var s = space - i/iter*space*0.4;\r\n            var point = {x: w/2+s*i, y: h/2};\r\n            point = this.rotate(pivot,point,rotation*360*i);\r\n            var r =  i/iter*10 + this.random(0,20)*randomness;\r\n            point.x = point.x + this.random(-r,r);\r\n            point.y = point.y + this.random(-r,r);\r\n            this.drawPixel(point);\r\n        }\r\n    }\r\n\r\n    drawPixel(point){\r\n        this.ctx.fillStyle = \"#ffffff\"; //white\r\n        this.ctx.fillRect(point.x, point.y, 1, 1);\r\n    }\r\n\r\n    //2d rotation\r\n    rotate(pivot, point, angle) {\r\n        var radians = (Math.PI / 180) * angle;\r\n        var cos = Math.cos(radians);\r\n        var sin = Math.sin(radians);\r\n        return {\r\n            x: (cos * (point.x - pivot.x)) + (sin * (point.y - pivot.y)) + pivot.x,\r\n            y: (cos * (point.y - pivot.y)) - (sin * (point.x - pivot.x)) + pivot.y\r\n        };\r\n    }\r\n\r\n    random(min, max) {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Galaxy;","// turbulence\r\n\r\nimport SimplexNoise from \"simplex-noise\";\r\nimport Alea from \"alea\";\r\n\r\nclass Noise {\r\n    constructor(name){\r\n        this.name = name;\r\n    }\r\n    \r\n    render(){\r\n        this.canvas = document.getElementById(this.name);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.h = this.canvas.height;\r\n        this.w = this.canvas.width;\r\n        this.seed = Date.now();\r\n        this.simplex = new SimplexNoise(new Alea(this.seed));\r\n        this.ctx.resetTransform();\r\n        this.imageData = this.ctx.getImageData(0,0,this.w,this.h);\r\n        for(var i = 0; i < this.w; i++){\r\n\t\t\tfor(var j = 0; j < this.h; j++){\r\n\t\t\t\tvar value = this.turbulence(i,j,3,0.3,0.5,10,250);\r\n\t\t\t\tthis.setHeight(i,j,value);\r\n\t\t\t}\r\n        }\r\n        this.ctx.putImageData(this.imageData, 0, 0);\r\n    }\r\n\r\n    setPixel(x,y,value){\r\n        var i = (this.w*y+x)*4;\r\n        this.imageData.data[i+0] = (value >> 0) & 0xff;\r\n        this.imageData.data[i+1] = (value >> 8) & 0xff;\r\n        this.imageData.data[i+2] = (value >> 16) & 0xff;\r\n        this.imageData.data[i+3] = 0xff;\r\n    }\r\n\r\n    setHeight(x,y,value){\r\n        var i = (this.w*y+x)*4;\r\n        this.imageData.data[i+0] = value;\r\n        this.imageData.data[i+1] = value;\r\n        this.imageData.data[i+2] = value;\r\n        this.imageData.data[i+3] = 0xff;\r\n    }\r\n\r\n    turbulence(x,y,octaves,persistence,scale,low,high){\r\n        var maxAmp = 0;\r\n        var amp = 1;\r\n        var freq = scale*0.01;\r\n        var total = 0;\r\n        for(var i = 0; i < octaves; i++){\r\n            total += this.simplex.noise2D(x*freq,y*freq)*amp;\r\n            maxAmp += amp;\r\n            amp *= persistence;\r\n            freq *= 2;\r\n        }\r\n        total /= maxAmp;\r\n        total = total * (high - low) / 2 + (high + low) / 2;\r\n        return total;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Noise;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CanvasView from './canvas';\r\nimport Tree from './tree';\r\nimport Maze from './maze';\r\nimport Cave from './cave';\r\nimport Dungeon from './dungeon';\r\nimport Noise from './noise';\r\nimport Galaxy from './galaxy';\r\n\r\nclass MyApp extends React.Component{\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<CanvasView renderer={Tree}/>\r\n\t\t\t\t<CanvasView renderer={Maze}/>\r\n\t\t\t\t<CanvasView renderer={Cave}/>\r\n\t\t\t\t<CanvasView renderer={Dungeon}/>\r\n\t\t\t\t<CanvasView renderer={Noise}/>\r\n\t\t\t\t<CanvasView renderer={Galaxy}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nReactDOM.render(\r\n\t<MyApp />,\r\n\tdocument.getElementById('app')\r\n);"],"sourceRoot":""}